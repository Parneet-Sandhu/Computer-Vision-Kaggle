{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6b00cc9f",
   "metadata": {
    "papermill": {
     "duration": 0.006278,
     "end_time": "2024-08-18T15:27:56.312987",
     "exception": false,
     "start_time": "2024-08-18T15:27:56.306709",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Computer Vision](https://www.kaggle.com/learn/computer-vision) course.  You can reference the tutorial at [this link](https://www.kaggle.com/ryanholbrook/the-convolutional-classifier).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb78e3ac",
   "metadata": {
    "papermill": {
     "duration": 0.005624,
     "end_time": "2024-08-18T15:27:56.324596",
     "exception": false,
     "start_time": "2024-08-18T15:27:56.318972",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<blockquote style=\"margin-right:auto; margin-left:auto; padding: 1em; margin:24px;\">\n",
    "    <strong>Accelerate Training with a Kaggle GPU!</strong><br>\n",
    "Did you know Kaggle offers free time with a GPU accelerator? You can speed up training neural networks in this course by switching to <strong>GPU</strong> in the <em>Accelerator</em> option on the right. (It may already be turned on.) Two things to be aware of:\n",
    "<ul>\n",
    "<li>Changing the <em>Accelerator</em> option will cause the notebook session to restart. You'll need to rerun any setup code.\n",
    "<li>You can have only one GPU session at a time, so be sure to shut the notebook down after you've finished the exercise.\n",
    "</ul>\n",
    "</blockquote>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c927e3db",
   "metadata": {
    "papermill": {
     "duration": 0.005491,
     "end_time": "2024-08-18T15:27:56.336075",
     "exception": false,
     "start_time": "2024-08-18T15:27:56.330584",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction #\n",
    "\n",
    "In the tutorial, we saw how to build an image classifier by attaching a head of dense layers to a pretrained base. The base we used was from a model called **VGG16**. We saw that the VGG16 architecture was prone to overfitting this dataset. Over this course, you'll learn a number of ways you can improve upon this initial attempt.\n",
    "\n",
    "The first way you'll see is to use a base more appropriate to the dataset. The base this model comes from is called **InceptionV1** (also known as GoogLeNet). InceptionV1 was one of the early winners of the ImageNet competition. One of its successors, InceptionV4, is among the state of the art today.\n",
    "\n",
    "To get started, run the code cell below to set everything up."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3515bd59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:27:56.349162Z",
     "iopub.status.busy": "2024-08-18T15:27:56.348884Z",
     "iopub.status.idle": "2024-08-18T15:28:22.435945Z",
     "shell.execute_reply": "2024-08-18T15:28:22.435168Z"
    },
    "lines_to_next_cell": 2,
    "papermill": {
     "duration": 26.095934,
     "end_time": "2024-08-18T15:28:22.438010",
     "exception": false,
     "start_time": "2024-08-18T15:27:56.342076",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-18 15:27:59.174894: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-08-18 15:27:59.174996: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-08-18 15:27:59.323549: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 5117 files belonging to 2 classes.\n",
      "Found 5051 files belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "# Setup feedback system\n",
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.computer_vision.ex1 import *\n",
    "\n",
    "# Imports\n",
    "import os, warnings\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import gridspec\n",
    "\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing import image_dataset_from_directory\n",
    "\n",
    "# Reproducability\n",
    "def set_seed(seed=31415):\n",
    "    np.random.seed(seed)\n",
    "    tf.random.set_seed(seed)\n",
    "    os.environ['PYTHONHASHSEED'] = str(seed)\n",
    "    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n",
    "set_seed()\n",
    "\n",
    "# Set Matplotlib defaults\n",
    "plt.rc('figure', autolayout=True)\n",
    "plt.rc('axes', labelweight='bold', labelsize='large',\n",
    "       titleweight='bold', titlesize=18, titlepad=10)\n",
    "plt.rc('image', cmap='magma')\n",
    "warnings.filterwarnings(\"ignore\") # to clean up output cells\n",
    "\n",
    "\n",
    "# Load training and validation sets\n",
    "ds_train_ = image_dataset_from_directory(\n",
    "    '../input/car-or-truck/train',\n",
    "    labels='inferred',\n",
    "    label_mode='binary',\n",
    "    image_size=[128, 128],\n",
    "    interpolation='nearest',\n",
    "    batch_size=64,\n",
    "    shuffle=True,\n",
    ")\n",
    "ds_valid_ = image_dataset_from_directory(\n",
    "    '../input/car-or-truck/valid',\n",
    "    labels='inferred',\n",
    "    label_mode='binary',\n",
    "    image_size=[128, 128],\n",
    "    interpolation='nearest',\n",
    "    batch_size=64,\n",
    "    shuffle=False,\n",
    ")\n",
    "\n",
    "# Data Pipeline\n",
    "def convert_to_float(image, label):\n",
    "    image = tf.image.convert_image_dtype(image, dtype=tf.float32)\n",
    "    return image, label\n",
    "\n",
    "AUTOTUNE = tf.data.experimental.AUTOTUNE\n",
    "ds_train = (\n",
    "    ds_train_\n",
    "    .map(convert_to_float)\n",
    "    .cache()\n",
    "    .prefetch(buffer_size=AUTOTUNE)\n",
    ")\n",
    "ds_valid = (\n",
    "    ds_valid_\n",
    "    .map(convert_to_float)\n",
    "    .cache()\n",
    "    .prefetch(buffer_size=AUTOTUNE)\n",
    ")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "969506b6",
   "metadata": {
    "papermill": {
     "duration": 0.006134,
     "end_time": "2024-08-18T15:28:22.450537",
     "exception": false,
     "start_time": "2024-08-18T15:28:22.444403",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The **InceptionV1** model pretrained on ImageNet is available in the [TensorFlow Hub](https://www.tensorflow.org/hub/) repository, but we'll load it from a local copy. Run this cell to load InceptionV1 for your base."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9a4bc75f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:28:22.464173Z",
     "iopub.status.busy": "2024-08-18T15:28:22.463540Z",
     "iopub.status.idle": "2024-08-18T15:28:26.428178Z",
     "shell.execute_reply": "2024-08-18T15:28:26.427215Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 3.973884,
     "end_time": "2024-08-18T15:28:26.430420",
     "exception": false,
     "start_time": "2024-08-18T15:28:22.456536",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import tensorflow_hub as hub\n",
    "\n",
    "pretrained_base = tf.keras.models.load_model(\n",
    "    '../input/cv-course-models/cv-course-models/inceptionv1'\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7f04af6",
   "metadata": {
    "papermill": {
     "duration": 0.005984,
     "end_time": "2024-08-18T15:28:26.442855",
     "exception": false,
     "start_time": "2024-08-18T15:28:26.436871",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1) Define Pretrained Base #\n",
    "\n",
    "Now that you have a pretrained base to do our feature extraction, decide whether this base should be trainable or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "43de0003",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:28:26.456369Z",
     "iopub.status.busy": "2024-08-18T15:28:26.456059Z",
     "iopub.status.idle": "2024-08-18T15:28:26.464697Z",
     "shell.execute_reply": "2024-08-18T15:28:26.463866Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.017862,
     "end_time": "2024-08-18T15:28:26.466749",
     "exception": false,
     "start_time": "2024-08-18T15:28:26.448887",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_Q1\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> When doing transfer learning, it's generally not a good idea to retrain the entire base -- at least not without some care. The reason is that the random weights in the head will initially create large gradient updates, which propogate back into the base layers and destroy much of the pretraining. Using techniques known as **fine tuning** it's possible to further train the base on new data, but this requires some care to do well."
      ],
      "text/plain": [
       "Correct: When doing transfer learning, it's generally not a good idea to retrain the entire base -- at least not without some care. The reason is that the random weights in the head will initially create large gradient updates, which propogate back into the base layers and destroy much of the pretraining. Using techniques known as **fine tuning** it's possible to further train the base on new data, but this requires some care to do well."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR_CODE_HERE\n",
    "pretrained_base.trainable = False\n",
    "\n",
    "# Check your answer\n",
    "q_1.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "185c33e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:28:26.481010Z",
     "iopub.status.busy": "2024-08-18T15:28:26.480727Z",
     "iopub.status.idle": "2024-08-18T15:28:26.484315Z",
     "shell.execute_reply": "2024-08-18T15:28:26.483515Z"
    },
    "papermill": {
     "duration": 0.01296,
     "end_time": "2024-08-18T15:28:26.486155",
     "exception": false,
     "start_time": "2024-08-18T15:28:26.473195",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_1.hint()\n",
    "#q_1.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da46421b",
   "metadata": {
    "papermill": {
     "duration": 0.006185,
     "end_time": "2024-08-18T15:28:26.499523",
     "exception": false,
     "start_time": "2024-08-18T15:28:26.493338",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2) Attach Head #\n",
    "\n",
    "Now that the base is defined to do the feature extraction, create a head of `Dense` layers to perform the classification, following this diagram:\n",
    "\n",
    "<figure>\n",
    "<img src=\"https://storage.googleapis.com/kaggle-media/learn/images/i5VU7Ry.png\" alt=\"Diagram of the dense head.\">\n",
    "</figure>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "71aa7d91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:28:26.513658Z",
     "iopub.status.busy": "2024-08-18T15:28:26.512983Z",
     "iopub.status.idle": "2024-08-18T15:28:26.531912Z",
     "shell.execute_reply": "2024-08-18T15:28:26.531104Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.027859,
     "end_time": "2024-08-18T15:28:26.533732",
     "exception": false,
     "start_time": "2024-08-18T15:28:26.505873",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"2_Q2\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "\n",
    "model = keras.Sequential([\n",
    "    pretrained_base,\n",
    "    layers.Flatten(),\n",
    "    layers.Dense(6, activation='relu'),\n",
    "    layers.Dense(1, activation='sigmoid'),\n",
    "])\n",
    "\n",
    "# Check your answer\n",
    "q_2.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "750be37e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:28:26.548008Z",
     "iopub.status.busy": "2024-08-18T15:28:26.547497Z",
     "iopub.status.idle": "2024-08-18T15:28:26.551036Z",
     "shell.execute_reply": "2024-08-18T15:28:26.550088Z"
    },
    "papermill": {
     "duration": 0.012765,
     "end_time": "2024-08-18T15:28:26.553004",
     "exception": false,
     "start_time": "2024-08-18T15:28:26.540239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_2.hint()\n",
    "#q_2.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec2f51eb",
   "metadata": {
    "papermill": {
     "duration": 0.006381,
     "end_time": "2024-08-18T15:28:26.565916",
     "exception": false,
     "start_time": "2024-08-18T15:28:26.559535",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3) Train #\n",
    "\n",
    "Before training a model in Keras, you need to specify an *optimizer* to perform the gradient descent, a *loss function* to be minimized, and (optionally) any *performance metrics*. The optimization algorithm we'll use for this course is called [\"Adam\"](https://keras.io/api/optimizers/adam/), which generally performs well regardless of what kind of problem you're trying to solve.\n",
    "\n",
    "The loss and the metrics, however, need to match the kind of problem you're trying to solve. Our problem is a **binary classification** problem: `Car` coded as 0, and `Truck` coded as 1. Choose an appropriate loss and an appropriate accuracy metric for binary classification."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a4b73015",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:28:26.579978Z",
     "iopub.status.busy": "2024-08-18T15:28:26.579717Z",
     "iopub.status.idle": "2024-08-18T15:28:26.608111Z",
     "shell.execute_reply": "2024-08-18T15:28:26.607287Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.037459,
     "end_time": "2024-08-18T15:28:26.609936",
     "exception": false,
     "start_time": "2024-08-18T15:28:26.572477",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_Q3\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE: what loss function should you use for a binary\n",
    "# classification problem? (Your answer for each should be a string.)\n",
    "optimizer = tf.keras.optimizers.Adam(epsilon=0.01)\n",
    "model.compile(\n",
    "    optimizer='adam',\n",
    "    loss='binary_crossentropy',\n",
    "    metrics=['binary_accuracy'],\n",
    ")\n",
    "\n",
    "# Check your answer\n",
    "q_3.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "01f5fff7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:28:26.624722Z",
     "iopub.status.busy": "2024-08-18T15:28:26.624436Z",
     "iopub.status.idle": "2024-08-18T15:28:26.628039Z",
     "shell.execute_reply": "2024-08-18T15:28:26.627188Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.012977,
     "end_time": "2024-08-18T15:28:26.629800",
     "exception": false,
     "start_time": "2024-08-18T15:28:26.616823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_3.hint()\n",
    "#q_3.solution()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4c9cafed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:28:26.644956Z",
     "iopub.status.busy": "2024-08-18T15:28:26.644187Z",
     "iopub.status.idle": "2024-08-18T15:30:45.359447Z",
     "shell.execute_reply": "2024-08-18T15:30:45.358376Z"
    },
    "papermill": {
     "duration": 138.725175,
     "end_time": "2024-08-18T15:30:45.361725",
     "exception": false,
     "start_time": "2024-08-18T15:28:26.636550",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1723994914.809333      79 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80/80 [==============================] - 24s 192ms/step - loss: 0.4650 - binary_accuracy: 0.7772 - val_loss: 0.3866 - val_binary_accuracy: 0.8327\n",
      "Epoch 2/30\n",
      "80/80 [==============================] - 4s 51ms/step - loss: 0.3703 - binary_accuracy: 0.8394 - val_loss: 0.3643 - val_binary_accuracy: 0.8452\n",
      "Epoch 3/30\n",
      "80/80 [==============================] - 4s 49ms/step - loss: 0.3426 - binary_accuracy: 0.8523 - val_loss: 0.3528 - val_binary_accuracy: 0.8480\n",
      "Epoch 4/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.3243 - binary_accuracy: 0.8622 - val_loss: 0.3429 - val_binary_accuracy: 0.8525\n",
      "Epoch 5/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.3099 - binary_accuracy: 0.8693 - val_loss: 0.3367 - val_binary_accuracy: 0.8565\n",
      "Epoch 6/30\n",
      "80/80 [==============================] - 4s 49ms/step - loss: 0.2977 - binary_accuracy: 0.8759 - val_loss: 0.3326 - val_binary_accuracy: 0.8575\n",
      "Epoch 7/30\n",
      "80/80 [==============================] - 4s 49ms/step - loss: 0.2874 - binary_accuracy: 0.8812 - val_loss: 0.3301 - val_binary_accuracy: 0.8592\n",
      "Epoch 8/30\n",
      "80/80 [==============================] - 4s 49ms/step - loss: 0.2786 - binary_accuracy: 0.8859 - val_loss: 0.3275 - val_binary_accuracy: 0.8618\n",
      "Epoch 9/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2712 - binary_accuracy: 0.8894 - val_loss: 0.3256 - val_binary_accuracy: 0.8612\n",
      "Epoch 10/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2640 - binary_accuracy: 0.8941 - val_loss: 0.3247 - val_binary_accuracy: 0.8618\n",
      "Epoch 11/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2581 - binary_accuracy: 0.8970 - val_loss: 0.3242 - val_binary_accuracy: 0.8620\n",
      "Epoch 12/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2526 - binary_accuracy: 0.8999 - val_loss: 0.3239 - val_binary_accuracy: 0.8620\n",
      "Epoch 13/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2476 - binary_accuracy: 0.9017 - val_loss: 0.3245 - val_binary_accuracy: 0.8626\n",
      "Epoch 14/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2426 - binary_accuracy: 0.9038 - val_loss: 0.3244 - val_binary_accuracy: 0.8630\n",
      "Epoch 15/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2380 - binary_accuracy: 0.9062 - val_loss: 0.3255 - val_binary_accuracy: 0.8628\n",
      "Epoch 16/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2337 - binary_accuracy: 0.9076 - val_loss: 0.3255 - val_binary_accuracy: 0.8622\n",
      "Epoch 17/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2298 - binary_accuracy: 0.9095 - val_loss: 0.3262 - val_binary_accuracy: 0.8632\n",
      "Epoch 18/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2262 - binary_accuracy: 0.9115 - val_loss: 0.3271 - val_binary_accuracy: 0.8638\n",
      "Epoch 19/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2216 - binary_accuracy: 0.9132 - val_loss: 0.3284 - val_binary_accuracy: 0.8638\n",
      "Epoch 20/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2181 - binary_accuracy: 0.9144 - val_loss: 0.3294 - val_binary_accuracy: 0.8644\n",
      "Epoch 21/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2148 - binary_accuracy: 0.9148 - val_loss: 0.3308 - val_binary_accuracy: 0.8626\n",
      "Epoch 22/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2113 - binary_accuracy: 0.9164 - val_loss: 0.3319 - val_binary_accuracy: 0.8644\n",
      "Epoch 23/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2080 - binary_accuracy: 0.9181 - val_loss: 0.3330 - val_binary_accuracy: 0.8650\n",
      "Epoch 24/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2052 - binary_accuracy: 0.9207 - val_loss: 0.3342 - val_binary_accuracy: 0.8654\n",
      "Epoch 25/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2019 - binary_accuracy: 0.9210 - val_loss: 0.3364 - val_binary_accuracy: 0.8642\n",
      "Epoch 26/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.1991 - binary_accuracy: 0.9224 - val_loss: 0.3367 - val_binary_accuracy: 0.8644\n",
      "Epoch 27/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.1959 - binary_accuracy: 0.9244 - val_loss: 0.3380 - val_binary_accuracy: 0.8648\n",
      "Epoch 28/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.1932 - binary_accuracy: 0.9246 - val_loss: 0.3393 - val_binary_accuracy: 0.8656\n",
      "Epoch 29/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.1915 - binary_accuracy: 0.9253 - val_loss: 0.3396 - val_binary_accuracy: 0.8642\n",
      "Epoch 30/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.1879 - binary_accuracy: 0.9261 - val_loss: 0.3422 - val_binary_accuracy: 0.8634\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    ds_train,\n",
    "    validation_data=ds_valid,\n",
    "    epochs=30,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8c351b4",
   "metadata": {
    "papermill": {
     "duration": 0.10568,
     "end_time": "2024-08-18T15:30:45.574485",
     "exception": false,
     "start_time": "2024-08-18T15:30:45.468805",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Run the cell below to plot the loss and metric curves for this training run."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "47525b61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:30:45.828564Z",
     "iopub.status.busy": "2024-08-18T15:30:45.828199Z",
     "iopub.status.idle": "2024-08-18T15:30:46.494698Z",
     "shell.execute_reply": "2024-08-18T15:30:46.493765Z"
    },
    "papermill": {
     "duration": 0.776035,
     "end_time": "2024-08-18T15:30:46.496726",
     "exception": false,
     "start_time": "2024-08-18T15:30:45.720691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "history_frame = pd.DataFrame(history.history)\n",
    "history_frame.loc[:, ['loss', 'val_loss']].plot()\n",
    "history_frame.loc[:, ['binary_accuracy', 'val_binary_accuracy']].plot();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90291f18",
   "metadata": {
    "papermill": {
     "duration": 0.108588,
     "end_time": "2024-08-18T15:30:46.712585",
     "exception": false,
     "start_time": "2024-08-18T15:30:46.603997",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 4) Examine Loss and Accuracy #\n",
    "\n",
    "Do you notice a difference between these learning curves and the curves for VGG16 from the tutorial? What does this difference tell you about what this model (InceptionV2) learned compared to VGG16? Are there ways in which one is better than the other? Worse?\n",
    "\n",
    "After you've thought about it, run the cell below to see the answer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0724ddfb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:30:46.928605Z",
     "iopub.status.busy": "2024-08-18T15:30:46.928231Z",
     "iopub.status.idle": "2024-08-18T15:30:46.935783Z",
     "shell.execute_reply": "2024-08-18T15:30:46.934912Z"
    },
    "papermill": {
     "duration": 0.118798,
     "end_time": "2024-08-18T15:30:46.937768",
     "exception": false,
     "start_time": "2024-08-18T15:30:46.818970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"4_Q4\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "That the training loss and validation loss stay fairly close is evidence that the model isn't just memorizing the training data, but rather learning general properties of the two classes. But, because this model converges at a loss greater than the VGG16 model, it's likely that it is underfitting some, and could benefit from some extra capacity.\n"
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "That the training loss and validation loss stay fairly close is evidence that the model isn't just memorizing the training data, but rather learning general properties of the two classes. But, because this model converges at a loss greater than the VGG16 model, it's likely that it is underfitting some, and could benefit from some extra capacity."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# View the solution (Run this code cell to receive credit!)\n",
    "q_4.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10a290d4",
   "metadata": {
    "papermill": {
     "duration": 0.106643,
     "end_time": "2024-08-18T15:30:47.150652",
     "exception": false,
     "start_time": "2024-08-18T15:30:47.044009",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Conclusion #\n",
    "\n",
    "In this first lesson, you learned the basics of **convolutional image classifiers**, that they consist of a **base** for extracting features from images, and a **head** which uses the features to decide the image's class. You also saw how to build a classifier with **transfer learning** on pretrained base. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d0acd27",
   "metadata": {
    "papermill": {
     "duration": 0.106407,
     "end_time": "2024-08-18T15:30:47.365260",
     "exception": false,
     "start_time": "2024-08-18T15:30:47.258853",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Keep Going #\n",
    "\n",
    "Move on to [**Lesson 2**](https://www.kaggle.com/ryanholbrook/convolution-and-relu) for a detailed look at how the base does this feature extraction. (It's really cool!)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30ccd155",
   "metadata": {
    "papermill": {
     "duration": 0.106212,
     "end_time": "2024-08-18T15:30:47.577925",
     "exception": false,
     "start_time": "2024-08-18T15:30:47.471713",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/computer-vision/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md",
   "split_at_heading": true
  },
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 708136,
     "sourceId": 1338830,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 701538,
     "sourceId": 1363948,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 878523,
     "sourceId": 1495782,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30648,
   "isGpuEnabled": true,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 177.386869,
   "end_time": "2024-08-18T15:30:50.765831",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-18T15:27:53.378962",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
