{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3f020e48",
   "metadata": {
    "papermill": {
     "duration": 0.00675,
     "end_time": "2024-08-18T15:18:49.391424",
     "exception": false,
     "start_time": "2024-08-18T15:18:49.384674",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Computer Vision](https://www.kaggle.com/learn/computer-vision) course.  You can reference the tutorial at [this link](https://www.kaggle.com/ryanholbrook/the-convolutional-classifier).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb4fd780",
   "metadata": {
    "papermill": {
     "duration": 0.005501,
     "end_time": "2024-08-18T15:18:49.402881",
     "exception": false,
     "start_time": "2024-08-18T15:18:49.397380",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<blockquote style=\"margin-right:auto; margin-left:auto; padding: 1em; margin:24px;\">\n",
    "    <strong>Accelerate Training with a Kaggle GPU!</strong><br>\n",
    "Did you know Kaggle offers free time with a GPU accelerator? You can speed up training neural networks in this course by switching to <strong>GPU</strong> in the <em>Accelerator</em> option on the right. (It may already be turned on.) Two things to be aware of:\n",
    "<ul>\n",
    "<li>Changing the <em>Accelerator</em> option will cause the notebook session to restart. You'll need to rerun any setup code.\n",
    "<li>You can have only one GPU session at a time, so be sure to shut the notebook down after you've finished the exercise.\n",
    "</ul>\n",
    "</blockquote>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ae382c4",
   "metadata": {
    "papermill": {
     "duration": 0.005537,
     "end_time": "2024-08-18T15:18:49.414202",
     "exception": false,
     "start_time": "2024-08-18T15:18:49.408665",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction #\n",
    "\n",
    "In the tutorial, we saw how to build an image classifier by attaching a head of dense layers to a pretrained base. The base we used was from a model called **VGG16**. We saw that the VGG16 architecture was prone to overfitting this dataset. Over this course, you'll learn a number of ways you can improve upon this initial attempt.\n",
    "\n",
    "The first way you'll see is to use a base more appropriate to the dataset. The base this model comes from is called **InceptionV1** (also known as GoogLeNet). InceptionV1 was one of the early winners of the ImageNet competition. One of its successors, InceptionV4, is among the state of the art today.\n",
    "\n",
    "To get started, run the code cell below to set everything up."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fed0e7e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:18:49.427563Z",
     "iopub.status.busy": "2024-08-18T15:18:49.426779Z",
     "iopub.status.idle": "2024-08-18T15:19:20.547869Z",
     "shell.execute_reply": "2024-08-18T15:19:20.547075Z"
    },
    "lines_to_next_cell": 2,
    "papermill": {
     "duration": 31.129925,
     "end_time": "2024-08-18T15:19:20.549895",
     "exception": false,
     "start_time": "2024-08-18T15:18:49.419970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-18 15:18:54.280704: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-08-18 15:18:54.280820: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-08-18 15:18:54.541733: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 5117 files belonging to 2 classes.\n",
      "Found 5051 files belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "# Setup feedback system\n",
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.computer_vision.ex1 import *\n",
    "\n",
    "# Imports\n",
    "import os, warnings\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import gridspec\n",
    "\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing import image_dataset_from_directory\n",
    "\n",
    "# Reproducability\n",
    "def set_seed(seed=31415):\n",
    "    np.random.seed(seed)\n",
    "    tf.random.set_seed(seed)\n",
    "    os.environ['PYTHONHASHSEED'] = str(seed)\n",
    "    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n",
    "set_seed()\n",
    "\n",
    "# Set Matplotlib defaults\n",
    "plt.rc('figure', autolayout=True)\n",
    "plt.rc('axes', labelweight='bold', labelsize='large',\n",
    "       titleweight='bold', titlesize=18, titlepad=10)\n",
    "plt.rc('image', cmap='magma')\n",
    "warnings.filterwarnings(\"ignore\") # to clean up output cells\n",
    "\n",
    "\n",
    "# Load training and validation sets\n",
    "ds_train_ = image_dataset_from_directory(\n",
    "    '../input/car-or-truck/train',\n",
    "    labels='inferred',\n",
    "    label_mode='binary',\n",
    "    image_size=[128, 128],\n",
    "    interpolation='nearest',\n",
    "    batch_size=64,\n",
    "    shuffle=True,\n",
    ")\n",
    "ds_valid_ = image_dataset_from_directory(\n",
    "    '../input/car-or-truck/valid',\n",
    "    labels='inferred',\n",
    "    label_mode='binary',\n",
    "    image_size=[128, 128],\n",
    "    interpolation='nearest',\n",
    "    batch_size=64,\n",
    "    shuffle=False,\n",
    ")\n",
    "\n",
    "# Data Pipeline\n",
    "def convert_to_float(image, label):\n",
    "    image = tf.image.convert_image_dtype(image, dtype=tf.float32)\n",
    "    return image, label\n",
    "\n",
    "AUTOTUNE = tf.data.experimental.AUTOTUNE\n",
    "ds_train = (\n",
    "    ds_train_\n",
    "    .map(convert_to_float)\n",
    "    .cache()\n",
    "    .prefetch(buffer_size=AUTOTUNE)\n",
    ")\n",
    "ds_valid = (\n",
    "    ds_valid_\n",
    "    .map(convert_to_float)\n",
    "    .cache()\n",
    "    .prefetch(buffer_size=AUTOTUNE)\n",
    ")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0a92869",
   "metadata": {
    "papermill": {
     "duration": 0.005857,
     "end_time": "2024-08-18T15:19:20.562107",
     "exception": false,
     "start_time": "2024-08-18T15:19:20.556250",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The **InceptionV1** model pretrained on ImageNet is available in the [TensorFlow Hub](https://www.tensorflow.org/hub/) repository, but we'll load it from a local copy. Run this cell to load InceptionV1 for your base."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ea0d5d53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:19:20.575721Z",
     "iopub.status.busy": "2024-08-18T15:19:20.575435Z",
     "iopub.status.idle": "2024-08-18T15:19:24.888784Z",
     "shell.execute_reply": "2024-08-18T15:19:24.888000Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 4.322572,
     "end_time": "2024-08-18T15:19:24.891023",
     "exception": false,
     "start_time": "2024-08-18T15:19:20.568451",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import tensorflow_hub as hub\n",
    "\n",
    "pretrained_base = tf.keras.models.load_model(\n",
    "    '../input/cv-course-models/cv-course-models/inceptionv1'\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c1bd2f7",
   "metadata": {
    "papermill": {
     "duration": 0.006224,
     "end_time": "2024-08-18T15:19:24.904750",
     "exception": false,
     "start_time": "2024-08-18T15:19:24.898526",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1) Define Pretrained Base #\n",
    "\n",
    "Now that you have a pretrained base to do our feature extraction, decide whether this base should be trainable or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "62cbcb3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:19:24.918110Z",
     "iopub.status.busy": "2024-08-18T15:19:24.917833Z",
     "iopub.status.idle": "2024-08-18T15:19:24.926723Z",
     "shell.execute_reply": "2024-08-18T15:19:24.925874Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.017726,
     "end_time": "2024-08-18T15:19:24.928528",
     "exception": false,
     "start_time": "2024-08-18T15:19:24.910802",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_Q1\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> When doing transfer learning, it's generally not a good idea to retrain the entire base -- at least not without some care. The reason is that the random weights in the head will initially create large gradient updates, which propogate back into the base layers and destroy much of the pretraining. Using techniques known as **fine tuning** it's possible to further train the base on new data, but this requires some care to do well."
      ],
      "text/plain": [
       "Correct: When doing transfer learning, it's generally not a good idea to retrain the entire base -- at least not without some care. The reason is that the random weights in the head will initially create large gradient updates, which propogate back into the base layers and destroy much of the pretraining. Using techniques known as **fine tuning** it's possible to further train the base on new data, but this requires some care to do well."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR_CODE_HERE\n",
    "pretrained_base.trainable = False\n",
    "\n",
    "# Check your answer\n",
    "q_1.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bd7ff1c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:19:24.943096Z",
     "iopub.status.busy": "2024-08-18T15:19:24.942826Z",
     "iopub.status.idle": "2024-08-18T15:19:24.946346Z",
     "shell.execute_reply": "2024-08-18T15:19:24.945520Z"
    },
    "papermill": {
     "duration": 0.012495,
     "end_time": "2024-08-18T15:19:24.948227",
     "exception": false,
     "start_time": "2024-08-18T15:19:24.935732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_1.hint()\n",
    "#q_1.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ece42348",
   "metadata": {
    "papermill": {
     "duration": 0.006209,
     "end_time": "2024-08-18T15:19:24.960696",
     "exception": false,
     "start_time": "2024-08-18T15:19:24.954487",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2) Attach Head #\n",
    "\n",
    "Now that the base is defined to do the feature extraction, create a head of `Dense` layers to perform the classification, following this diagram:\n",
    "\n",
    "<figure>\n",
    "<img src=\"https://storage.googleapis.com/kaggle-media/learn/images/i5VU7Ry.png\" alt=\"Diagram of the dense head.\">\n",
    "</figure>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "31992195",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:19:24.974286Z",
     "iopub.status.busy": "2024-08-18T15:19:24.974009Z",
     "iopub.status.idle": "2024-08-18T15:19:24.992554Z",
     "shell.execute_reply": "2024-08-18T15:19:24.991765Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.027574,
     "end_time": "2024-08-18T15:19:24.994512",
     "exception": false,
     "start_time": "2024-08-18T15:19:24.966938",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"2_Q2\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "\n",
    "model = keras.Sequential([\n",
    "    pretrained_base,\n",
    "    layers.Flatten(),\n",
    "    layers.Dense(6, activation='relu'),\n",
    "    layers.Dense(1, activation='sigmoid'),\n",
    "])\n",
    "\n",
    "# Check your answer\n",
    "q_2.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b964cd4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:19:25.009112Z",
     "iopub.status.busy": "2024-08-18T15:19:25.008852Z",
     "iopub.status.idle": "2024-08-18T15:19:25.012370Z",
     "shell.execute_reply": "2024-08-18T15:19:25.011632Z"
    },
    "papermill": {
     "duration": 0.012721,
     "end_time": "2024-08-18T15:19:25.014248",
     "exception": false,
     "start_time": "2024-08-18T15:19:25.001527",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_2.hint()\n",
    "#q_2.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48489bbd",
   "metadata": {
    "papermill": {
     "duration": 0.006305,
     "end_time": "2024-08-18T15:19:25.027225",
     "exception": false,
     "start_time": "2024-08-18T15:19:25.020920",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3) Train #\n",
    "\n",
    "Before training a model in Keras, you need to specify an *optimizer* to perform the gradient descent, a *loss function* to be minimized, and (optionally) any *performance metrics*. The optimization algorithm we'll use for this course is called [\"Adam\"](https://keras.io/api/optimizers/adam/), which generally performs well regardless of what kind of problem you're trying to solve.\n",
    "\n",
    "The loss and the metrics, however, need to match the kind of problem you're trying to solve. Our problem is a **binary classification** problem: `Car` coded as 0, and `Truck` coded as 1. Choose an appropriate loss and an appropriate accuracy metric for binary classification."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c1bdf3a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:19:25.041239Z",
     "iopub.status.busy": "2024-08-18T15:19:25.040962Z",
     "iopub.status.idle": "2024-08-18T15:19:25.072246Z",
     "shell.execute_reply": "2024-08-18T15:19:25.071415Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.040391,
     "end_time": "2024-08-18T15:19:25.074112",
     "exception": false,
     "start_time": "2024-08-18T15:19:25.033721",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_Q3\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE: what loss function should you use for a binary\n",
    "# classification problem? (Your answer for each should be a string.)\n",
    "optimizer = tf.keras.optimizers.Adam(epsilon=0.01)\n",
    "model.compile(\n",
    "    optimizer='adam',\n",
    "    loss='binary_crossentropy',\n",
    "    metrics=['binary_accuracy'],\n",
    ")\n",
    "\n",
    "# Check your answer\n",
    "q_3.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1f174569",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:19:25.089622Z",
     "iopub.status.busy": "2024-08-18T15:19:25.088961Z",
     "iopub.status.idle": "2024-08-18T15:19:25.092430Z",
     "shell.execute_reply": "2024-08-18T15:19:25.091672Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.013043,
     "end_time": "2024-08-18T15:19:25.094340",
     "exception": false,
     "start_time": "2024-08-18T15:19:25.081297",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_3.hint()\n",
    "#q_3.solution()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "44d5f519",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:19:25.109420Z",
     "iopub.status.busy": "2024-08-18T15:19:25.108866Z",
     "iopub.status.idle": "2024-08-18T15:21:50.079339Z",
     "shell.execute_reply": "2024-08-18T15:21:50.078465Z"
    },
    "papermill": {
     "duration": 144.980354,
     "end_time": "2024-08-18T15:21:50.081695",
     "exception": false,
     "start_time": "2024-08-18T15:19:25.101341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1723994374.011732      76 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80/80 [==============================] - 27s 221ms/step - loss: 0.5091 - binary_accuracy: 0.7573 - val_loss: 0.4003 - val_binary_accuracy: 0.8272\n",
      "Epoch 2/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.3889 - binary_accuracy: 0.8263 - val_loss: 0.3709 - val_binary_accuracy: 0.8390\n",
      "Epoch 3/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.3564 - binary_accuracy: 0.8417 - val_loss: 0.3569 - val_binary_accuracy: 0.8462\n",
      "Epoch 4/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.3364 - binary_accuracy: 0.8548 - val_loss: 0.3492 - val_binary_accuracy: 0.8507\n",
      "Epoch 5/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.3223 - binary_accuracy: 0.8611 - val_loss: 0.3441 - val_binary_accuracy: 0.8547\n",
      "Epoch 6/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.3111 - binary_accuracy: 0.8681 - val_loss: 0.3409 - val_binary_accuracy: 0.8551\n",
      "Epoch 7/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.3022 - binary_accuracy: 0.8724 - val_loss: 0.3388 - val_binary_accuracy: 0.8559\n",
      "Epoch 8/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2948 - binary_accuracy: 0.8755 - val_loss: 0.3372 - val_binary_accuracy: 0.8567\n",
      "Epoch 9/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2882 - binary_accuracy: 0.8798 - val_loss: 0.3361 - val_binary_accuracy: 0.8575\n",
      "Epoch 10/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2824 - binary_accuracy: 0.8833 - val_loss: 0.3360 - val_binary_accuracy: 0.8596\n",
      "Epoch 11/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2772 - binary_accuracy: 0.8859 - val_loss: 0.3354 - val_binary_accuracy: 0.8600\n",
      "Epoch 12/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2725 - binary_accuracy: 0.8900 - val_loss: 0.3355 - val_binary_accuracy: 0.8622\n",
      "Epoch 13/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2681 - binary_accuracy: 0.8919 - val_loss: 0.3356 - val_binary_accuracy: 0.8626\n",
      "Epoch 14/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2642 - binary_accuracy: 0.8931 - val_loss: 0.3361 - val_binary_accuracy: 0.8632\n",
      "Epoch 15/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2606 - binary_accuracy: 0.8956 - val_loss: 0.3369 - val_binary_accuracy: 0.8638\n",
      "Epoch 16/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2572 - binary_accuracy: 0.8974 - val_loss: 0.3378 - val_binary_accuracy: 0.8638\n",
      "Epoch 17/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2539 - binary_accuracy: 0.9007 - val_loss: 0.3383 - val_binary_accuracy: 0.8636\n",
      "Epoch 18/30\n",
      "80/80 [==============================] - 4s 51ms/step - loss: 0.2508 - binary_accuracy: 0.9023 - val_loss: 0.3385 - val_binary_accuracy: 0.8648\n",
      "Epoch 19/30\n",
      "80/80 [==============================] - 4s 51ms/step - loss: 0.2479 - binary_accuracy: 0.9033 - val_loss: 0.3392 - val_binary_accuracy: 0.8638\n",
      "Epoch 20/30\n",
      "80/80 [==============================] - 4s 51ms/step - loss: 0.2451 - binary_accuracy: 0.9040 - val_loss: 0.3397 - val_binary_accuracy: 0.8628\n",
      "Epoch 21/30\n",
      "80/80 [==============================] - 4s 50ms/step - loss: 0.2426 - binary_accuracy: 0.9040 - val_loss: 0.3404 - val_binary_accuracy: 0.8626\n",
      "Epoch 22/30\n",
      "80/80 [==============================] - 4s 51ms/step - loss: 0.2399 - binary_accuracy: 0.9060 - val_loss: 0.3425 - val_binary_accuracy: 0.8622\n",
      "Epoch 23/30\n",
      "80/80 [==============================] - 4s 51ms/step - loss: 0.2376 - binary_accuracy: 0.9064 - val_loss: 0.3421 - val_binary_accuracy: 0.8630\n",
      "Epoch 24/30\n",
      "80/80 [==============================] - 4s 51ms/step - loss: 0.2353 - binary_accuracy: 0.9076 - val_loss: 0.3441 - val_binary_accuracy: 0.8620\n",
      "Epoch 25/30\n",
      "80/80 [==============================] - 4s 51ms/step - loss: 0.2330 - binary_accuracy: 0.9076 - val_loss: 0.3438 - val_binary_accuracy: 0.8624\n",
      "Epoch 26/30\n",
      "80/80 [==============================] - 4s 51ms/step - loss: 0.2309 - binary_accuracy: 0.9083 - val_loss: 0.3451 - val_binary_accuracy: 0.8622\n",
      "Epoch 27/30\n",
      "80/80 [==============================] - 4s 51ms/step - loss: 0.2289 - binary_accuracy: 0.9113 - val_loss: 0.3461 - val_binary_accuracy: 0.8630\n",
      "Epoch 28/30\n",
      "80/80 [==============================] - 4s 51ms/step - loss: 0.2269 - binary_accuracy: 0.9115 - val_loss: 0.3456 - val_binary_accuracy: 0.8612\n",
      "Epoch 29/30\n",
      "80/80 [==============================] - 4s 51ms/step - loss: 0.2249 - binary_accuracy: 0.9138 - val_loss: 0.3468 - val_binary_accuracy: 0.8608\n",
      "Epoch 30/30\n",
      "80/80 [==============================] - 4s 51ms/step - loss: 0.2232 - binary_accuracy: 0.9142 - val_loss: 0.3475 - val_binary_accuracy: 0.8602\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    ds_train,\n",
    "    validation_data=ds_valid,\n",
    "    epochs=30,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "167caee6",
   "metadata": {
    "papermill": {
     "duration": 0.105758,
     "end_time": "2024-08-18T15:21:50.294983",
     "exception": false,
     "start_time": "2024-08-18T15:21:50.189225",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Run the cell below to plot the loss and metric curves for this training run."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e9ac8f2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:21:50.549052Z",
     "iopub.status.busy": "2024-08-18T15:21:50.548710Z",
     "iopub.status.idle": "2024-08-18T15:21:51.263015Z",
     "shell.execute_reply": "2024-08-18T15:21:51.262126Z"
    },
    "papermill": {
     "duration": 0.823673,
     "end_time": "2024-08-18T15:21:51.264961",
     "exception": false,
     "start_time": "2024-08-18T15:21:50.441288",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "history_frame = pd.DataFrame(history.history)\n",
    "history_frame.loc[:, ['loss', 'val_loss']].plot()\n",
    "history_frame.loc[:, ['binary_accuracy', 'val_binary_accuracy']].plot();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e08f3fd",
   "metadata": {
    "papermill": {
     "duration": 0.106951,
     "end_time": "2024-08-18T15:21:51.479586",
     "exception": false,
     "start_time": "2024-08-18T15:21:51.372635",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 4) Examine Loss and Accuracy #\n",
    "\n",
    "Do you notice a difference between these learning curves and the curves for VGG16 from the tutorial? What does this difference tell you about what this model (InceptionV2) learned compared to VGG16? Are there ways in which one is better than the other? Worse?\n",
    "\n",
    "After you've thought about it, run the cell below to see the answer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "79b64431",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T15:21:51.694075Z",
     "iopub.status.busy": "2024-08-18T15:21:51.693759Z",
     "iopub.status.idle": "2024-08-18T15:21:51.700866Z",
     "shell.execute_reply": "2024-08-18T15:21:51.700076Z"
    },
    "papermill": {
     "duration": 0.116592,
     "end_time": "2024-08-18T15:21:51.702726",
     "exception": false,
     "start_time": "2024-08-18T15:21:51.586134",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"4_Q4\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "That the training loss and validation loss stay fairly close is evidence that the model isn't just memorizing the training data, but rather learning general properties of the two classes. But, because this model converges at a loss greater than the VGG16 model, it's likely that it is underfitting some, and could benefit from some extra capacity.\n"
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "That the training loss and validation loss stay fairly close is evidence that the model isn't just memorizing the training data, but rather learning general properties of the two classes. But, because this model converges at a loss greater than the VGG16 model, it's likely that it is underfitting some, and could benefit from some extra capacity."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# View the solution (Run this code cell to receive credit!)\n",
    "q_4.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76fe75b7",
   "metadata": {
    "papermill": {
     "duration": 0.1077,
     "end_time": "2024-08-18T15:21:51.919115",
     "exception": false,
     "start_time": "2024-08-18T15:21:51.811415",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Conclusion #\n",
    "\n",
    "In this first lesson, you learned the basics of **convolutional image classifiers**, that they consist of a **base** for extracting features from images, and a **head** which uses the features to decide the image's class. You also saw how to build a classifier with **transfer learning** on pretrained base. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e369cabc",
   "metadata": {
    "papermill": {
     "duration": 0.107313,
     "end_time": "2024-08-18T15:21:52.132904",
     "exception": false,
     "start_time": "2024-08-18T15:21:52.025591",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Keep Going #\n",
    "\n",
    "Move on to [**Lesson 2**](https://www.kaggle.com/ryanholbrook/convolution-and-relu) for a detailed look at how the base does this feature extraction. (It's really cool!)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31ad58ba",
   "metadata": {
    "papermill": {
     "duration": 0.107221,
     "end_time": "2024-08-18T15:21:52.346175",
     "exception": false,
     "start_time": "2024-08-18T15:21:52.238954",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/computer-vision/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md",
   "split_at_heading": true
  },
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 708136,
     "sourceId": 1338830,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 701538,
     "sourceId": 1363948,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 878523,
     "sourceId": 1495782,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30648,
   "isGpuEnabled": true,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 190.149088,
   "end_time": "2024-08-18T15:21:55.557643",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-18T15:18:45.408555",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
